package edu.ccrm.domain;
import java.time.LocalDate;
public abstract class Person {
    private int id;
    private String fullName;
    private String email;
    private LocalDate dateOfBirth;

    public Person(int id, String fullName, String email) {
        this.id = id;
        this.fullName = fullName;
        this.email = email;
    }
    public abstract String getProfile();
    public int getId() { return id; }
    public String getFullName() { return fullName; }
    public void setFullName(String fullName) { this.fullName = fullName; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
}

package edu.ccrm.domain;
import java.util.ArrayList;
import java.util.List;
public class Student extends Person {
    private String regNo;
    private List<Enrollment> enrolledCourses;
    public Student(int id, String fullName, String email, String regNo) {
        super(id, fullName, email); // Demonstrates 'super' keyword [cite: 64]
        this.regNo = regNo;
        this.enrolledCourses = new ArrayList<>();
    }

    public String getRegNo() {
        return regNo;
    }

    public List<Enrollment> getEnrolledCourses() {
        return enrolledCourses;
    }
    @Override
    public String getProfile() {
        return "Student Profile: \n" +
               "  ID: " + getId() + "\n" +
               "  Reg No: " + regNo + "\n" +
               "  Name: " + getFullName() + "\n" +
               "  Email: " + getEmail();
    }
    @Override
    public String toString() {
        return String.format("Student[ID=%d, Name=%s, RegNo=%s]", getId(), getFullName(), regNo);
    }
}

package edu.ccrm.domain;
package edu.ccrm.domain;
public class Course {
    private final String code;
    private final String title;
    private final int credits;
    private final Semester semester;
    private Instructor instructor;
    private Course(Builder builder) {
        this.code = builder.code;
        this.title = builder.title;
        this.credits = builder.credits;
        this.semester = builder.semester;
    }
    public String getCode() { return code; }
    public String getTitle() { return title; }
    public int getCredits() { return credits; }
    public Semester getSemester() { return semester; }
    public Instructor getInstructor() { return instructor; }
    public void setInstructor(Instructor instructor) { this.instructor = instructor; }

    @Override
    public String toString() {
        return String.format("Course[Code=%s, Title=%s, Credits=%d]", code, title, credits);
    }
    public static class Builder {
        private String code;
        private String title;
        private int credits;
        private Semester semester;

        public Builder(String code, String title) {
            this.code = code;
            this.title = title;
        }

        public Builder credits(int credits) {
            this.credits = credits;
            return this;
        }

        public Builder semester(Semester semester) {
            this.semester = semester;
            return this;
        }

        public Course build() {
            // Add validation logic here if needed
            return new Course(this);
        }
    }
}

package edu.ccrm.domain;
public enum Grade {
    S(10), A(9), B(8), C(7), D(6), E(5), F(0);

    private final int gradePoint;
    Grade(int gradePoint) {
        this.gradePoint = gradePoint;
    }

    public int getGradePoint() {
        return gradePoint;
    }
}


package edu.ccrm.util;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.stream.Stream;

public class RecursiveFileUtil {
    public static long calculateDirectorySize(Path path) throws IOException {
        try (Stream<Path> walk = Files.walk(path)) {
            return walk
                .filter(Files::isRegularFile)
                .mapToLong(p -> {
                    try {
                        return Files.size(p);
                    } catch (IOException e) {
                        System.err.println("Failed to get size for " + p + ": " + e.getMessage());
                        return 0L;
                    }
                })
                .sum();
        }
    }
}
